"""
    Search

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: latest
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from zav.search_api.api_client import ApiClient, Endpoint as _Endpoint
from zav.search_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from zav.search_api.model.date_range_schema import DateRangeSchema
from zav.search_api.model.expert import Expert
from zav.search_api.model.expert_response import ExpertResponse
from zav.search_api.model.expert_search_post_response import ExpertSearchPostResponse
from zav.search_api.model.guid_string import GUIDString
from zav.search_api.model.generic_error import GenericError
from zav.search_api.model.person_list_response import PersonListResponse
from zav.search_api.model.query_string import QueryString
from zav.search_api.model.search_post_request import SearchPostRequest
from zav.search_api.model.uuid_string import UUIDString
from zav.search_api.model.year_range_schema import YearRangeSchema


class PersonApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.author_get_endpoint = _Endpoint(
            settings={
                'response_type': (Expert,),
                'auth': [],
                'endpoint_path': '/entities/person/{author_id}',
                'operation_id': 'author_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'author_id',
                    'user_roles',
                    'tenant',
                ],
                'required': [
                    'author_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'author_id':
                        (str,),
                    'user_roles':
                        (str,),
                    'tenant':
                        (str,),
                },
                'attribute_map': {
                    'author_id': 'author_id',
                    'user_roles': 'user-roles',
                    'tenant': 'tenant',
                },
                'location_map': {
                    'author_id': 'path',
                    'user_roles': 'header',
                    'tenant': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.authors_get_endpoint = _Endpoint(
            settings={
                'response_type': (PersonListResponse,),
                'auth': [],
                'endpoint_path': '/entities/person/list',
                'operation_id': 'authors_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'author_ids',
                    'user_roles',
                    'tenant',
                    'page',
                    'page_size',
                ],
                'required': [
                    'author_ids',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'author_ids',
                    'page',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('author_ids',): {

                        'min_items': 1,
                    },
                    ('page',): {

                        'inclusive_minimum': 0,
                    },
                    ('page_size',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'author_ids':
                        ([str],),
                    'user_roles':
                        (str,),
                    'tenant':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                },
                'attribute_map': {
                    'author_ids': 'author_ids',
                    'user_roles': 'user-roles',
                    'tenant': 'tenant',
                    'page': 'page',
                    'page_size': 'page_size',
                },
                'location_map': {
                    'author_ids': 'query',
                    'user_roles': 'header',
                    'tenant': 'query',
                    'page': 'query',
                    'page_size': 'query',
                },
                'collection_format_map': {
                    'author_ids': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.person_search_endpoint = _Endpoint(
            settings={
                'response_type': (ExpertResponse,),
                'auth': [],
                'endpoint_path': '/entities/person/search',
                'operation_id': 'person_search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'requester_uuid',
                    'user_roles',
                    'tenant',
                    'query_string',
                    'retrieval_method',
                    'year',
                    'sources',
                    'cited_by',
                    'cites',
                    'authored_by',
                    'date',
                    'doc_ids',
                    'tag_ids',
                    'has_concept',
                    'with_content',
                    'include_default_filters',
                    'document_types',
                    'with_code',
                    'index_cluster',
                    'page',
                    'page_size',
                    'location_cities',
                    'location_countries',
                    'organizations',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'retrieval_method',
                    'document_types',
                ],
                'validation': [
                    'index_cluster',
                    'page',
                    'page_size',
                ]
            },
            root_map={
                'validations': {
                    ('index_cluster',): {

                        'regex': {
                            'pattern': r'^[a-zA-Z0-9-_]+:[a-zA-Z0-9-_]+$',  # noqa: E501
                        },
                    },
                    ('page',): {

                        'inclusive_minimum': 0,
                    },
                    ('page_size',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('retrieval_method',): {

                        "KNN": "knn",
                        "KEYWORD": "keyword",
                        "MIXED": "mixed"
                    },
                    ('document_types',): {

                        "DOCUMENT": "document",
                        "CITATION": "citation",
                        "NOTE": "note"
                    },
                },
                'openapi_types': {
                    'requester_uuid':
                        (UUIDString,),
                    'user_roles':
                        (str,),
                    'tenant':
                        (str,),
                    'query_string':
                        (QueryString,),
                    'retrieval_method':
                        (str,),
                    'year':
                        (YearRangeSchema,),
                    'sources':
                        ([str],),
                    'cited_by':
                        (str,),
                    'cites':
                        (str,),
                    'authored_by':
                        (str,),
                    'date':
                        (DateRangeSchema,),
                    'doc_ids':
                        ([GUIDString],),
                    'tag_ids':
                        ([str],),
                    'has_concept':
                        (str,),
                    'with_content':
                        (bool,),
                    'include_default_filters':
                        (bool,),
                    'document_types':
                        ([str],),
                    'with_code':
                        (bool,),
                    'index_cluster':
                        (str,),
                    'page':
                        (int,),
                    'page_size':
                        (int,),
                    'location_cities':
                        ([str],),
                    'location_countries':
                        ([str],),
                    'organizations':
                        ([str],),
                },
                'attribute_map': {
                    'requester_uuid': 'requester-uuid',
                    'user_roles': 'user-roles',
                    'tenant': 'tenant',
                    'query_string': 'query_string',
                    'retrieval_method': 'retrieval_method',
                    'year': 'year',
                    'sources': 'sources',
                    'cited_by': 'cited_by',
                    'cites': 'cites',
                    'authored_by': 'authored_by',
                    'date': 'date',
                    'doc_ids': 'doc_ids',
                    'tag_ids': 'tag_ids',
                    'has_concept': 'has_concept',
                    'with_content': 'with_content',
                    'include_default_filters': 'include_default_filters',
                    'document_types': 'document_types',
                    'with_code': 'with_code',
                    'index_cluster': 'index_cluster',
                    'page': 'page',
                    'page_size': 'page_size',
                    'location_cities': 'location_cities',
                    'location_countries': 'location_countries',
                    'organizations': 'organizations',
                },
                'location_map': {
                    'requester_uuid': 'header',
                    'user_roles': 'header',
                    'tenant': 'query',
                    'query_string': 'query',
                    'retrieval_method': 'query',
                    'year': 'query',
                    'sources': 'query',
                    'cited_by': 'query',
                    'cites': 'query',
                    'authored_by': 'query',
                    'date': 'query',
                    'doc_ids': 'query',
                    'tag_ids': 'query',
                    'has_concept': 'query',
                    'with_content': 'query',
                    'include_default_filters': 'query',
                    'document_types': 'query',
                    'with_code': 'query',
                    'index_cluster': 'query',
                    'page': 'query',
                    'page_size': 'query',
                    'location_cities': 'query',
                    'location_countries': 'query',
                    'organizations': 'query',
                },
                'collection_format_map': {
                    'sources': 'csv',
                    'doc_ids': 'csv',
                    'tag_ids': 'csv',
                    'document_types': 'csv',
                    'location_cities': 'csv',
                    'location_countries': 'csv',
                    'organizations': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.person_search_post_endpoint = _Endpoint(
            settings={
                'response_type': (ExpertSearchPostResponse,),
                'auth': [],
                'endpoint_path': '/entities/person/search',
                'operation_id': 'person_search_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'requester_uuid',
                    'user_roles',
                    'user_tenants',
                    'search_post_request',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'requester_uuid':
                        (UUIDString,),
                    'user_roles':
                        (str,),
                    'user_tenants':
                        (str,),
                    'search_post_request':
                        (SearchPostRequest,),
                },
                'attribute_map': {
                    'requester_uuid': 'requester-uuid',
                    'user_roles': 'user-roles',
                    'user_tenants': 'user-tenants',
                },
                'location_map': {
                    'requester_uuid': 'header',
                    'user_roles': 'header',
                    'user_tenants': 'header',
                    'search_post_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def author_get(
        self,
        author_id,
        **kwargs
    ):
        """Get author information  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.author_get(author_id, async_req=True)
        >>> result = thread.get()

        Args:
            author_id (str): Limit results to only papers authored by the given person

        Keyword Args:
            user_roles (str): [optional]
            tenant (str): Tenant. [optional] if omitted the server will use the default value of "zetaalpha"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Expert
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['author_id'] = \
            author_id
        return self.author_get_endpoint.call_with_http_info(**kwargs)

    def authors_get(
        self,
        author_ids,
        **kwargs
    ):
        """Get experts for a given list of their ids.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.authors_get(author_ids, async_req=True)
        >>> result = thread.get()

        Args:
            author_ids ([str]): Limit results to only papers authored by the given authors.

        Keyword Args:
            user_roles (str): [optional]
            tenant (str): Tenant. [optional] if omitted the server will use the default value of "zetaalpha"
            page (int): Page. [optional] if omitted the server will use the default value of 1
            page_size (int): Page size. [optional] if omitted the server will use the default value of 10
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            PersonListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['author_ids'] = \
            author_ids
        return self.authors_get_endpoint.call_with_http_info(**kwargs)

    def person_search(
        self,
        **kwargs
    ):
        """Get experts for a given query  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.person_search(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            requester_uuid (UUIDString): [optional]
            user_roles (str): [optional]
            tenant (str): Tenant. [optional] if omitted the server will use the default value of "zetaalpha"
            query_string (QueryString): Query string. [optional]
            retrieval_method (str): Method used for retrieval. [optional] if omitted the server will use the default value of "keyword"
            year (YearRangeSchema): Limit results to those in year range (inclusive). [optional]
            sources ([str]): Limit results to selected sources. [optional]
            cited_by (str): Limit results to only papers cited by the given paper. [optional]
            cites (str): Limit results to only papers cite the given paper. [optional]
            authored_by (str): Limit results to only papers authored by the given person. [optional]
            date (DateRangeSchema): Limit results to those in date range (inclusive). [optional]
            doc_ids ([GUIDString]): Limit results to only the given document IDs. [optional]
            tag_ids ([str]): Limit results to only the given tag IDs. [optional]
            has_concept (str): Limit results to only papers that contain the given concept. [optional]
            with_content (bool): Limit results to only papers that have content (text representation). Note. This doesn't apply to private documents.. [optional] if omitted the server will use the default value of False
            include_default_filters (bool): Filter results based on the default filters configuration of the index.. [optional] if omitted the server will use the default value of True
            document_types ([str]): Limit results to documents with the given type. [optional] if omitted the server will use the default value of ["document"]
            with_code (bool): Output only papers with code.. [optional] if omitted the server will use the default value of False
            index_cluster (str): Human friendly name that specifies which index configuration to use during search. The way we convert this string into infrastructure configuration is part of the internal logic of this service. Ideally all possible values should be listed as part of another request along with the description of what each value means.  Currently, the value can be constructed by using knowledge of the index infrastructure. In particular, the value is separated by the `:` character. The part on the left of `:` represents the kubernetes namespace of the index cluster, while the part on the right specifies the infix in the index name.  For example, if a user wants to search in the index cluster located in the `foo` namespace and use the index named `my_tenant_bar_documents`, then the `index_cluster` value should be `foo:bar`. The user may also need to specify the retrieval unit and tenant as part of the request.  > Note: There's currently no endpoint for retrieving all valid values that the `index_cluster` parameter can take. . [optional]
            page (int): Page. [optional] if omitted the server will use the default value of 1
            page_size (int): Page size. [optional] if omitted the server will use the default value of 10
            location_cities ([str]): Limit results to documents of authors located in cities. [optional]
            location_countries ([str]): Limit results to documents of authors located in countries. [optional]
            organizations ([str]): Limit results to documents of authors affiliated with organization. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ExpertResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.person_search_endpoint.call_with_http_info(**kwargs)

    def person_search_post(
        self,
        **kwargs
    ):
        """Get experts based on query and parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.person_search_post(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            requester_uuid (UUIDString): [optional]
            user_roles (str): [optional]
            user_tenants (str): [optional]
            search_post_request (SearchPostRequest): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ExpertSearchPostResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.person_search_post_endpoint.call_with_http_info(**kwargs)

