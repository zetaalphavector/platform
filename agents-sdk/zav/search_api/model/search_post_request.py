"""
    Search

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: latest
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from zav.search_api.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from zav.search_api.exceptions import ApiAttributeError


def lazy_import():
    from zav.search_api.model.date_range_schema import DateRangeSchema
    from zav.search_api.model.document_id_string import DocumentIdString
    from zav.search_api.model.facets_configuration import FacetsConfiguration
    from zav.search_api.model.filters_configuration import FiltersConfiguration
    from zav.search_api.model.index_cluster_string import IndexClusterString
    from zav.search_api.model.query_encoder_service_string import QueryEncoderServiceString
    from zav.search_api.model.query_string import QueryString
    from zav.search_api.model.retrieval_method_string import RetrievalMethodString
    from zav.search_api.model.retrieval_unit import RetrievalUnit
    from zav.search_api.model.sort_order_schema import SortOrderSchema
    from zav.search_api.model.sort_schema import SortSchema
    from zav.search_api.model.sorting_configuration_list import SortingConfigurationList
    from zav.search_api.model.uid_string import UIDString
    from zav.search_api.model.year_range_schema import YearRangeSchema
    globals()['DateRangeSchema'] = DateRangeSchema
    globals()['DocumentIdString'] = DocumentIdString
    globals()['FacetsConfiguration'] = FacetsConfiguration
    globals()['FiltersConfiguration'] = FiltersConfiguration
    globals()['IndexClusterString'] = IndexClusterString
    globals()['QueryEncoderServiceString'] = QueryEncoderServiceString
    globals()['QueryString'] = QueryString
    globals()['RetrievalMethodString'] = RetrievalMethodString
    globals()['RetrievalUnit'] = RetrievalUnit
    globals()['SortOrderSchema'] = SortOrderSchema
    globals()['SortSchema'] = SortSchema
    globals()['SortingConfigurationList'] = SortingConfigurationList
    globals()['UIDString'] = UIDString
    globals()['YearRangeSchema'] = YearRangeSchema


class SearchPostRequest(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('search_engine',): {
            'ZETA_ALPHA': "zeta_alpha",
            'GOOGLE_SCHOLAR': "google_scholar",
            'BING': "bing",
            'GOOGLE': "google",
        },
        ('document_types',): {
            'DOCUMENT': "document",
            'CITATION': "citation",
            'NOTE': "note",
        },
    }

    validations = {
        ('page',): {
            'inclusive_minimum': 0,
        },
        ('page_size',): {
            'inclusive_minimum': 1,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'retrieval_unit': (RetrievalUnit,),  # noqa: E501
            'filters': (FiltersConfiguration,),  # noqa: E501
            'facets': (FacetsConfiguration,),  # noqa: E501
            'sorting': (SortingConfigurationList,),  # noqa: E501
            'search_profile_name': (str,),  # noqa: E501
            'requested_field_paths': ([str],),  # noqa: E501
            'tenant': (str,),  # noqa: E501
            'search_engine': (str,),  # noqa: E501
            'query_string': (QueryString,),  # noqa: E501
            'retrieval_method': (RetrievalMethodString,),  # noqa: E501
            'include_default_filters': (bool,),  # noqa: E501
            'page': (int,),  # noqa: E501
            'page_size': (int,),  # noqa: E501
            'rerank': (bool,),  # noqa: E501
            'rerank_top_n': (int,),  # noqa: E501
            'aggregate_reranked_results': (bool,),  # noqa: E501
            'index_cluster': (IndexClusterString,),  # noqa: E501
            'query_encoder_service': (QueryEncoderServiceString,),  # noqa: E501
            'reranker_service': (QueryEncoderServiceString,),  # noqa: E501
            'visibility': ([str],),  # noqa: E501
            'year': (YearRangeSchema,),  # noqa: E501
            'sources': ([str],),  # noqa: E501
            'cited_by': (str,),  # noqa: E501
            'cites': (str,),  # noqa: E501
            'authored_by': (str,),  # noqa: E501
            'date': (DateRangeSchema,),  # noqa: E501
            'doc_ids': ([DocumentIdString],),  # noqa: E501
            'tag_ids': ([str],),  # noqa: E501
            'has_concept': (str,),  # noqa: E501
            'with_content': (bool,),  # noqa: E501
            'document_types': ([str],),  # noqa: E501
            'with_code': (bool,),  # noqa: E501
            'location_cities': ([str],),  # noqa: E501
            'location_countries': ([str],),  # noqa: E501
            'organizations': ([str],),  # noqa: E501
            'sort': (SortSchema,),  # noqa: E501
            'sort_order': (SortOrderSchema,),  # noqa: E501
            'similar_to': ([UIDString],),  # noqa: E501
            'collapse': (str, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'retrieval_unit': 'retrieval_unit',  # noqa: E501
        'filters': 'filters',  # noqa: E501
        'facets': 'facets',  # noqa: E501
        'sorting': 'sorting',  # noqa: E501
        'search_profile_name': 'search_profile_name',  # noqa: E501
        'requested_field_paths': 'requested_field_paths',  # noqa: E501
        'tenant': 'tenant',  # noqa: E501
        'search_engine': 'search_engine',  # noqa: E501
        'query_string': 'query_string',  # noqa: E501
        'retrieval_method': 'retrieval_method',  # noqa: E501
        'include_default_filters': 'include_default_filters',  # noqa: E501
        'page': 'page',  # noqa: E501
        'page_size': 'page_size',  # noqa: E501
        'rerank': 'rerank',  # noqa: E501
        'rerank_top_n': 'rerank_top_n',  # noqa: E501
        'aggregate_reranked_results': 'aggregate_reranked_results',  # noqa: E501
        'index_cluster': 'index_cluster',  # noqa: E501
        'query_encoder_service': 'query_encoder_service',  # noqa: E501
        'reranker_service': 'reranker_service',  # noqa: E501
        'visibility': 'visibility',  # noqa: E501
        'year': 'year',  # noqa: E501
        'sources': 'sources',  # noqa: E501
        'cited_by': 'cited_by',  # noqa: E501
        'cites': 'cites',  # noqa: E501
        'authored_by': 'authored_by',  # noqa: E501
        'date': 'date',  # noqa: E501
        'doc_ids': 'doc_ids',  # noqa: E501
        'tag_ids': 'tag_ids',  # noqa: E501
        'has_concept': 'has_concept',  # noqa: E501
        'with_content': 'with_content',  # noqa: E501
        'document_types': 'document_types',  # noqa: E501
        'with_code': 'with_code',  # noqa: E501
        'location_cities': 'location_cities',  # noqa: E501
        'location_countries': 'location_countries',  # noqa: E501
        'organizations': 'organizations',  # noqa: E501
        'sort': 'sort',  # noqa: E501
        'sort_order': 'sort_order',  # noqa: E501
        'similar_to': 'similar_to',  # noqa: E501
        'collapse': 'collapse',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, retrieval_unit, *args, **kwargs):  # noqa: E501
        """SearchPostRequest - a model defined in OpenAPI

        Args:
            retrieval_unit (RetrievalUnit):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            filters (FiltersConfiguration): [optional]  # noqa: E501
            facets (FacetsConfiguration): [optional]  # noqa: E501
            sorting (SortingConfigurationList): [optional]  # noqa: E501
            search_profile_name (str): [optional]  # noqa: E501
            requested_field_paths ([str]): [optional]  # noqa: E501
            tenant (str): [optional] if omitted the server will use the default value of "zetaalpha"  # noqa: E501
            search_engine (str): [optional] if omitted the server will use the default value of "zeta_alpha"  # noqa: E501
            query_string (QueryString): [optional]  # noqa: E501
            retrieval_method (RetrievalMethodString): [optional]  # noqa: E501
            include_default_filters (bool): [optional] if omitted the server will use the default value of True  # noqa: E501
            page (int): [optional] if omitted the server will use the default value of 1  # noqa: E501
            page_size (int): [optional] if omitted the server will use the default value of 10  # noqa: E501
            rerank (bool): [optional] if omitted the server will use the default value of False  # noqa: E501
            rerank_top_n (int): [optional] if omitted the server will use the default value of 30  # noqa: E501
            aggregate_reranked_results (bool): [optional] if omitted the server will use the default value of False  # noqa: E501
            index_cluster (IndexClusterString): [optional]  # noqa: E501
            query_encoder_service (QueryEncoderServiceString): [optional]  # noqa: E501
            reranker_service (QueryEncoderServiceString): [optional]  # noqa: E501
            visibility ([str]): [optional]  # noqa: E501
            year (YearRangeSchema): [optional]  # noqa: E501
            sources ([str]): [optional]  # noqa: E501
            cited_by (str): [optional]  # noqa: E501
            cites (str): [optional]  # noqa: E501
            authored_by (str): [optional]  # noqa: E501
            date (DateRangeSchema): [optional]  # noqa: E501
            doc_ids ([DocumentIdString]): [optional]  # noqa: E501
            tag_ids ([str]): [optional]  # noqa: E501
            has_concept (str): [optional]  # noqa: E501
            with_content (bool): [optional] if omitted the server will use the default value of False  # noqa: E501
            document_types ([str]): [optional] if omitted the server will use the default value of ["document"]  # noqa: E501
            with_code (bool): [optional] if omitted the server will use the default value of False  # noqa: E501
            location_cities ([str]): [optional]  # noqa: E501
            location_countries ([str]): [optional]  # noqa: E501
            organizations ([str]): [optional]  # noqa: E501
            sort (SortSchema): [optional]  # noqa: E501
            sort_order (SortOrderSchema): [optional]  # noqa: E501
            similar_to ([UIDString]): [optional]  # noqa: E501
            collapse (str, none_type): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.retrieval_unit = retrieval_unit
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, retrieval_unit, *args, **kwargs):  # noqa: E501
        """SearchPostRequest - a model defined in OpenAPI

        Args:
            retrieval_unit (RetrievalUnit):

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            filters (FiltersConfiguration): [optional]  # noqa: E501
            facets (FacetsConfiguration): [optional]  # noqa: E501
            sorting (SortingConfigurationList): [optional]  # noqa: E501
            search_profile_name (str): [optional]  # noqa: E501
            requested_field_paths ([str]): [optional]  # noqa: E501
            tenant (str): [optional] if omitted the server will use the default value of "zetaalpha"  # noqa: E501
            search_engine (str): [optional] if omitted the server will use the default value of "zeta_alpha"  # noqa: E501
            query_string (QueryString): [optional]  # noqa: E501
            retrieval_method (RetrievalMethodString): [optional]  # noqa: E501
            include_default_filters (bool): [optional] if omitted the server will use the default value of True  # noqa: E501
            page (int): [optional] if omitted the server will use the default value of 1  # noqa: E501
            page_size (int): [optional] if omitted the server will use the default value of 10  # noqa: E501
            rerank (bool): [optional] if omitted the server will use the default value of False  # noqa: E501
            rerank_top_n (int): [optional] if omitted the server will use the default value of 30  # noqa: E501
            aggregate_reranked_results (bool): [optional] if omitted the server will use the default value of False  # noqa: E501
            index_cluster (IndexClusterString): [optional]  # noqa: E501
            query_encoder_service (QueryEncoderServiceString): [optional]  # noqa: E501
            reranker_service (QueryEncoderServiceString): [optional]  # noqa: E501
            visibility ([str]): [optional]  # noqa: E501
            year (YearRangeSchema): [optional]  # noqa: E501
            sources ([str]): [optional]  # noqa: E501
            cited_by (str): [optional]  # noqa: E501
            cites (str): [optional]  # noqa: E501
            authored_by (str): [optional]  # noqa: E501
            date (DateRangeSchema): [optional]  # noqa: E501
            doc_ids ([DocumentIdString]): [optional]  # noqa: E501
            tag_ids ([str]): [optional]  # noqa: E501
            has_concept (str): [optional]  # noqa: E501
            with_content (bool): [optional] if omitted the server will use the default value of False  # noqa: E501
            document_types ([str]): [optional] if omitted the server will use the default value of ["document"]  # noqa: E501
            with_code (bool): [optional] if omitted the server will use the default value of False  # noqa: E501
            location_cities ([str]): [optional]  # noqa: E501
            location_countries ([str]): [optional]  # noqa: E501
            organizations ([str]): [optional]  # noqa: E501
            sort (SortSchema): [optional]  # noqa: E501
            sort_order (SortOrderSchema): [optional]  # noqa: E501
            similar_to ([UIDString]): [optional]  # noqa: E501
            collapse (str, none_type): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.retrieval_unit = retrieval_unit
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
